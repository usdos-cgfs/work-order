<script>
  /************************************************************
   *    List Def: IT Software
   ************************************************************/
  vm.listDefs.push({
    uid: "it_software",
    name: "st_it_software",
    title: "st_it_software",
    viewFields: {
      ID: { type: "Text", koMap: "empty" },
      Title: { type: "Text", koMap: "requestID", required: false },
      Name: {
        type: "Text",
        koMap: "itSoftwareName",
        required: true,
        displayName: "Software Name",
      },
      Quantity: {
        type: "Text",
        koMap: "itSoftwareQuantity",
        required: true,
        displayName: "Quantity",
      },
      POCName: {
        type: "Text",
        koMap: "itSoftwarePOCName",
        required: true,
        displayName: "POC Name",
      },
      Cost: {
        type: "Text",
        koMap: "itSoftwareCost",
        required: true,
        displayName: "Cost",
      },
      RequestType: {
        type: "Text",
        koMap: "itSoftwareType",
        required: true,
        displayName: "Request Type",
      },
      PRNumber: {
        type: "Text",
        koMap: "itSoftwarePRNum",
        required: false,
        displayName: "PR Number",
      },

      PurchaseFrequency: {
        type: "Text",
        koMap: "itSoftwarePurchaseFreq",
        required: false,
        displayName: "Purchase Frequency",
      },

      ApprovedPurchase: {
        type: "Text",
        koMap: "itSoftwareAppPurchase",
        required: false,
        displayName: "Approved Purchase",
      },

      FundingSource: {
        type: "Text",
        koMap: "itSoftwareFundSource",
        required: false,
        displayName: "Funding Source",
      },
    },
  });

  /***************************************************************
   *    Declare Observables
   ***************************************************************/
  vm.itSoftwareName = ko.observable();
  vm.itSoftwareQuantity = ko.observable();
  vm.itSoftwarePOCName = ko.observable();
  vm.itSoftwareCost = ko.observable();
  vm.itSoftwareType = ko.observable();
  vm.itSoftwareTypeOpts = ko.observableArray(["New", "Maintenance Renewal"]);
  vm.itSoftwarePRNum = ko.observable();
  vm.itSoftwareShowPRNum = ko.pureComputed(function () {
    return vm.page() == "admin.aspx";
  });
  vm.itSoftwarePurchaseFreq = ko.observable();
  vm.itSoftwareAppPurchase = ko.observable();
  vm.itSoftwareFundSource = ko.observable();

  vm.itSoftwareCreateProcurement = async function () {
    var docRootUrl =
      sal.globalConfig.siteUrl + "/" + workOrderDocDef.name + "/";
    var vm = this;
    var sourceAttachmentFolder = docRootUrl + vm.requestFolderPath();
    var addendum = "<ul>";
    var valuePairs = [];
    if (vm.selectedServiceType().listDef) {
      valuePairs = getValuePairsHuman(
        vm.selectedServiceType().listDef.viewFields
      );
    }
    if (valuePairs.length) {
      valuePairs.forEach(function (vp) {
        addendum += "<li>" + vp[0] + ": " + vp[1] + "</li>";
      });
    }
    addendum += "</ul>";

    vm.selectedServiceType(
      vm.configServiceTypes().find(function (serviceType) {
        return serviceType.UID == "procurement";
      })
    );

    vm.requestStatus("Draft");

    vm.requestID(createNewRequestID());
    updateUrlParam("reqid", vm.requestID());

    vm.requestStageNum(0);
    vm.requestIsActive(1);

    vm.request.pipeline.allRequestOrgs().forEach(function (org) {
      if (
        !vm.requestOrgs().find(function (ro) {
          return ro.ID == org.ID;
        })
      ) {
        vm.requestOrgs.push(org);
      }
    });

    vm.requestClosedDate(null);
    vm.requestSubmittedDate(null);
    vm.requestDescriptionHTML(addendum);
    vm.requestActions([]);
    vm.requestApprovals([]);
    vm.requestAttachments([]);
    vm.request.dateRanges.all([]);
    vm.requestAssignments([]);

    vm.currentView("new");

    var destinationAttachmentFolder = docRootUrl + vm.requestFolderPath();

    vm.libRefWODocs().createFolderRec(
      vm.requestFolderPath(),
      async function () {
        vm.libRefWODocs().setLibFolderPermissions(
          vm.requestFolderPath(),
          vm.requestFolderPerms(),
          async function () {
            await sal.utilities.copyFilesAsync(
              sourceAttachmentFolder,
              destinationAttachmentFolder
            );
            var valuePair = [["WorkOrderID", vm.requestID()]];
            var files = await vm
              .libRefWODocs()
              .getFolderContentsAsync(vm.requestFolderPath());

            await files.forEach(async function (file) {
              await vm.libRefWODocs().updateListItemAsync(file.ID, valuePair);
            });
            window.setTimeout(fetchAttachments, 1000);
          }
        );
      }
    );
  };
</script>

<script type="text/html" id="tmpl_it_software">
  <!-- ko if: itSoftwareShowPRNum -->
  <button
    type="button"
    class="ui primary button"
    data-bind="click: $root.itSoftwareCreateProcurement"
  >
    Create Procurement
  </button>
  <hr />
  <br />
  <!-- /ko -->
  <div class="ui form">
    <div class="ui grid">
      <div class="eight wide field">
        <label> Software Name<span class="required">*</span>: </label>
        <input
          type="text"
          data-bind="value: itSoftwareName, disable: currentView()=='view'"
        />
      </div>
      <div class="eight wide field">
        <label> Quantity<span class="required">*</span>: </label>
        <input
          type="text"
          data-bind="value: itSoftwareQuantity, disable: currentView()=='view'"
        />
      </div>
      <div class="eight wide field">
        <label> POC<span class="required">*</span>: </label>
        <input
          type="text"
          data-bind="value: itSoftwarePOCName, disable: currentView()=='view'"
        />
      </div>
      <div class="eight wide field">
        <label> Cost<span class="required">*</span>: </label>
        <input
          type="text"
          data-bind="value: itSoftwareCost, disable: currentView()=='view'"
        />
      </div>
      <div class="eight wide field">
        <label> Request Type<span class="required">*</span>: </label>
        <select
          type="text"
          data-bind="disable: currentView() == 'view',
            options: itSoftwareTypeOpts, optionsCaption: 'Select...', value: itSoftwareType"
        ></select>
      </div>

      <!-- ko if: itSoftwareShowPRNum -->
      <div class="eight wide field">
        <label>PR #: </label>
        <input
          type="text"
          data-bind="value: itSoftwarePRNum, disable: currentView()=='view'"
        />
      </div>
      <!-- /ko -->

      <div class="eight wide field">
        <label> Purchase Frequency<span class="required">*</span>: </label>
        <select
          data-bind="value: itSoftwarePurchaseFreq, disable: currentView()=='view'"
          type="text"
        >
          <option value="oneTime">One Time</option>
          <option value="recurring">Recurring</option>
        </select>
      </div>

      <div class="eight wide field">
        <label> Approved Purchase<span class="required">*</span>: </label>
        <select
          data-bind="value: itSoftwareAppPurchase, disable: currentView()=='view'"
          type="text"
        >
          <option value="yes">Yes</option>
          <option value="no">No</option>
        </select>
      </div>

      <div class="eight wide field">
        <label> Funding Source<span class="required">*</span>: </label>
        <select
          data-bind="value: itSoftwareFundSource, disable: currentView()=='view'"
          type="text"
        >
          <option value="project">Project</option>
          <option value="contract">Contract</option>
          <option value="other">Other</option>
        </select>
      </div>
    </div>
    <br />
  </div>
</script>
