<script>
  /************************************************************
   *    List Def:
   ************************************************************/
  vm.listDefs.push({
    uid: "overtime",
    name: "st_overtime",
    title: "st_overtime",
    viewFields: {
      ID: { type: "Text", koMap: "empty", required: false },
      Title: { type: "Text", koMap: "requestID", required: false },
      FullName: { type: "Person", koMap: "overtimeFullName", required: true },
      ManagerGov: {
        type: "Person",
        koMap: "overtimeManagerGov",
        required: true,
      },
      ManagerGTM: {
        type: "Person",
        koMap: "overtimeManagerGTM",
        required: true,
      },
      // BudgetPMO: {
      //   type: "Person",
      //   koMap: "overtimeBudgetPMO",
      //   required: true,
      // },
      Office: { type: "Text", koMap: "overtimeOffice", required: true },
      RequisitionNumber: {
        type: "Text",
        koMap: "overtimeRequisitionNumber",
        required: true,
      },
      Task: {
        type: "Text",
        koMap: "overtimeTask",
        required: true,
      },
      LaborCategory: {
        type: "Text",
        koMap: "overtimeLaborCategory",
        required: true,
      },
      ContractorType: {
        type: "Text",
        koMap: "overtimeContractorType",
        required: true,
      },
      Hours: {
        type: "Number",
        koMap: "overtimeHours",
        required: true,
      },
      DatesRaw: {
        type: "Document",
        koMap: "overtimeDateStore",
        required: false,
        displayName: "Dates",
      },
    },
  });

  /***************************************************************
   *    Declare Observables
   ***************************************************************/
  var DeptApproversTitle = "GOV_MGMT";
  var DeptApproversId = sal.globalConfig.siteGroups.find(function (group) {
    return group.title == DeptApproversTitle;
  })?.ID;
  vm.overtimeFullName = new PeopleField();

  var peopleSchemaOpts = {
    PrincipalAccountType: "User,SPGroup",
  };
  vm.overtimeManagerGov = new PeopleField(peopleSchemaOpts);
  vm.overtimeManagerGTM = new PeopleField();
  // vm.overtimeBudgetPMO = new PeopleField();

  // vm.overtimeBudgetPMOMap = ko.pureComputed({
  //   read: function () {
  //     var person = new PeopleField();
  //     if (vm.overtimeBudgetPMO) person.setUser();
  //     return;
  //   },
  // });

  // vm.overtimeBudgetPMOSelect = ko.observable();
  // vm.overtimeBudgetPMOSelect.subscribe(function (pmo) {
  //   vm.overtimeBudgetPMO.setUser(pmo.UserGroup);
  // });

  // vm.overtimeBudgetPMOOpts = ko.pureComputed(function () {
  //   return vm.configRequestOrgs().filter(function (ro) {
  //     return (
  //       ro.OrgType == configRequestOrgsListDef.viewFields.OrgType.opts.BUDGETPMO
  //     );
  //   });
  // });
  // vm.overtimeBudgetPMOOptsText = function (pmo) {
  //   var users = pmo.UserGroup.get_lookupValue();
  //   var userGroup = sal.globalConfig.siteGroups.find((group) => {
  //     return group.ID == pmo.UserGroup.get_lookupId();
  //   });
  //   if (userGroup) {
  //     users = userGroup.users.map((user) => user.title).join("; ");
  //   }
  //   return pmo.Title + ": " + users;
  // };

  // vm.overtimeBudgetPMODisp = ko.pureComputed({
  //   read: function () {
  //     var pmo = vm.overtimeBudgetPMO;
  //     var users = pmo.title();
  //     var userGroup = sal.globalConfig.siteGroups.find((group) => {
  //       return group.ID == pmo.ID();
  //     });
  //     if (userGroup) {
  //       users = userGroup.users.map((user) => user.title).join("; ");
  //       return pmo.title() + ": " + users;
  //     }
  //     return users;
  //   },
  // });

  vm.overtimeOffice = ko.observable();

  vm.overtimeOfficeSelection = ko.observable();

  vm.overtimeOfficeOpts = ko.pureComputed(function () {
    return vm
      .configRequestOrgs()
      .filter(function (ro) {
        return (
          ro.OrgType ==
          configRequestOrgsListDef.viewFields.OrgType.opts.DEPARTMENT
        );
      })
      .map(function (dept) {
        return dept.Title;
      });
  });
  vm.overtimeRequisitionNumber = ko.observable();
  vm.overtimeTask = ko.observable();
  vm.overtimeLaborCategory = ko.observable();
  vm.overtimeContractorType = ko.observable();
  vm.overtimeContractorTypeOpts = ko.observableArray(["SCA", "Non-SCA"]);

  // vm.overtimeDates = new DateRangeTable("overtimedates", { type: "date" });
  vm.overtimeHours = ko.observable();

  vm.overtimeDateStore = Workorder.Common.Components.DateTable();

  var overtime = vm.configServiceTypes().find(function (stype) {
    return stype.UID == "overtime";
  });

  overtime.validate = function () {
    // Service type specific validation
    var hasDates = vm.overtimeDateStore.doc().length;
    if (!hasDates) {
      alert(
        "This request has not been saved. \n" +
          "Please enter date ranges for your overtime request and click Add+"
      );
      vm.requestIsSaveable(false);
      return;
    }
    var totalHours = 0;
    vm.overtimeDateStore.doc().forEach(function (entry) {
      if (!entry.hours) {
        vm.requestIsSaveable(false);
      } else {
        totalHours += parseFloat(entry.hours);
      }
    });

    if (!vm.requestIsSaveable()) {
      alert(
        "This request has not been saved. \n" +
          "Please provide hours of overtime for each date."
      );
    }

    if (totalHours != vm.overtimeHours()) {
      alert(
        "This request has not been saved. \n" +
          "Hours assigned by date does not equal overtime hours provided"
      );
      vm.requestIsSaveable(false);
    }
  };
</script>

<script type="text/html" id="tmpl_overtime">
  <div class="ui form">
    <div class="two fields">
      <div class="field">
        <label>Contractor<span class="required">*</span>: </label>
        <input
          class="editable-field"
          type="text"
          disabled="true"
          data-bind="value: overtimeFullName.title, visible: currentView() == 'view'"
        />
        <div
          id="peopleovertimeFullName"
          class="editable-field"
          data-bind="people: overtimeFullName, 
            visible: currentView() != 'view'"
        ></div>
      </div>
      <div class="field">
        <label>Gov Manager<span class="required">*</span>: </label>
        <input
          class="editable-field"
          type="text"
          disabled="true"
          data-bind="value: overtimeManagerGov.title,
          visible: currentView() == 'view'"
        />
        <div
          id="peopleovertimeManagerGov"
          class="editable-field"
          data-bind="people: overtimeManagerGov, 
            visible: currentView() != 'view'"
        ></div>
      </div>
    </div>
    <div class="two fields">
      <div class="field">
        <label>COR/GTM<span class="required">*</span>: </label>
        <input
          class="editable-field"
          type="text"
          disabled="true"
          data-bind="value: overtimeManagerGTM.title, 
          visible: currentView() == 'view'"
        />
        <div
          id="peopleovertimeManagerGTM"
          class="editable-field"
          data-bind="people: overtimeManagerGTM, 
            visible: currentView() != 'view'"
        ></div>
      </div>
      <!-- <div class="field">
        <label
          >Budget PMO<span class="required">*</span>:
          <select
            name="overtime-budget-pmo"
            id="overtime-budget-pmo"
            class="editable-field"
            data-bind="visible: currentView() != 'view',
            value: overtimeBudgetPMOSelect, options: overtimeBudgetPMOOpts,
            optionsText: overtimeBudgetPMOOptsText,
            optionsCaption: 'Select...'"
          ></select>
        </label>
        <input
          class="editable-field"
          type="text"
          disabled="true"
          data-bind="value: overtimeBudgetPMODisp, 
            visible: currentView() == 'view'"
        />
      </div> -->
    </div>
    <div class="two fields">
      <div class="field">
        <label>Labor Category (LCAT)<span class="required">*</span>:</label>
        <input
          class="editable-field"
          type="text"
          data-bind="disable:
              currentView() == 'view', value: overtimeLaborCategory"
        />
      </div>
      <div class="field">
        <label>Project/Task<span class="required">*</span>:</label>
        <input
          class="editable-field"
          type="text"
          data-bind="disable:
              currentView() == 'view', value: overtimeTask"
        />
      </div>
    </div>
    <div class="two fields">
      <div class="field">
        <label
          >Requisition Number/Task Order<span class="required">*</span>:</label
        >
        <input
          class="editable-field"
          type="text"
          data-bind="disable:
              currentView() == 'view', value: overtimeRequisitionNumber"
        />
      </div>
      <div class="field">
        <label>Contractor Type<span class="required">*</span>:</label>
        <select
          class="editable-field"
          type="text"
          data-bind="disable: currentView() == 'view',
              value: overtimeContractorType, options: overtimeContractorTypeOpts,
              optionsCaption: 'Select...'"
        ></select>
      </div>
    </div>
    <div class="two fields">
      <!-- <div class="field">
        <label>Overtime Dates<span class="required">*</span>:</label>
        <input
          class="editable-field"
          type="text"
          data-bind="disable:
              currentView() == 'view', value: overtimeDates"
        />
      </div> -->
      <div class="field">
        <label>Department<span class="required">*</span>:</label>
        <select
          class="editable-field"
          type="text"
          data-bind="disable: currentView() == 'view',
            value: overtimeOffice, options: overtimeOfficeOpts,
            optionsCaption: 'Select...'"
        ></select>
      </div>
      <div class="field">
        <label>Overtime Hours<span class="required">*</span>:</label>
        <input
          class="editable-field"
          type="Number"
          data-bind="disable: currentView() == 'view',
              value: overtimeHours"
        />
      </div>
    </div>
    <div>
      <div
        data-bind="template: {
        name: 'template_dates',
        data: overtimeDateStore
      }"
      ></div>
    </div>
    <!-- <div class="">
      <h3>Overtime Dates<span class="required">*</span>:</h3>
      <div
        data-bind="template: 
        {name: 'template_dateranges', 
        data: overtimeDates }"
      ></div>
    </div> -->
  </div>
</script>
